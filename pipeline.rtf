{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green0\blue0;\red253\green154\blue0;\red255\green0\blue255;
\red19\green37\blue209;\red0\green0\blue0;}
\margl1440\margr1440\vieww14000\viewh14500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Full overview of the pipeline\

\b0 \
1. Register each frame of the motion-corrected movie to reference z-stack by finding the x, y, z position and rotation angle (r) that maximize correlations between (36) partially overlapping blocks from the movie and the slices of the stack.\
2a. Divide movie into sub-movies\'97series of frames with correlated intensities and x, y, z, r estimates\
2b. Run cell finding on these sub-movies.\
3a. Map found cells back into reference space.\
3b. Determine whether rois found in each sub-movie came from the same cell or not based on position in reference.\

\b \
What does mills do ?\

\b0 Most of the mills package exists to perform 
\b #1 
\b0 and then to visualize the results. The main function is 
\b blockwiseMovieStackCorr.m
\b0  which was extensive documentation for its many optional arguments. There are also many functions which operate on the output localization summary file that generate useful visualizations and quality controls, including to help generate figures to guide manual definition of the of sub-movie divisions for 
\b #2a
\b0  (although it would be nice to write a gui that gives the user feedback on this). Finally, a function called 
\b registerRois.m 
\b0 can accomplish 
\b #3a 
\b0 provided 2b has been accomplished by separate code. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 ______________________________________________________________________\ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \
#1
\b0 \

\b =======\
MAIN FUNCTION \
blockwiseMovieStackCorr - register movies to subject-specific reference stack \
				    
\b0 (see bottom of page for more detailed description of algorithm)
\b \
IN: 		subject name\
		movie\
		
\b0 optional arguments
\b \
OUT: 		xyzrcoPeak 
\b0 (best x,y,z,r values and their corresponding correlation values and oddball status)
\b \
         		params (
\b0 parameters used to get this registration)
\b \
SAVED: 	summary.mat file 
\b0 with xyzrcoPeak and other info (see intaglio doc). 
\b \
		frameXXX/blockXXX.mat 
\b0 files containing sparse formatted correlation values and x,y,z,r indices \
\

\b \
VISUALIZATION TOOLS:\
createPairsPlot -
\b0  plot xy, xz, yz, xr, yr, zr correlation peaks for a given block
\b \
blocksByTimeHeatPlots - 
\b0 plot heat maps of x,y,z,r,c,o values
\b \
blocksByTimeLinePlots 
\b0 - plot line plots of x,y,z,r,c,o values. has useful optional args for mean centering, plotting mean lines, etc
\b \
blockRectsGifWrapper 
\b0 - create a gif of the block position in 2d space - 
\b helpful for seeing rotation
\b0 \

\b ballStickGifWrapper 
\b0 - create a gif of block position in 3d space 
\b \
blockComparisonGifs 
\b0  - create gifs of block-stack montage, false color overlay, and 
\b \
\

\i unmaintained:\

\i0 plotDriftAllSessions, inspectAllDatasets - 
\b0 these functions do something related to showing registration information related to all subjects (or all datasets for one subject) in one big plot\

\b plotBlockShifts - 
\b0 at some point this allowed us to plot a vector field of block position in movie relative to stack; might still work?
\b \
\
\
#2a - useful for breaking up clusters\
========\
blocksByTimeHeatPlots, blocksByTimeLinePlots - see above visualization tools section\
\
#3b\
========\
MAIN FUNCTION\
registerRois - maps found cells from sub-movies into subject-specific reference stack space
\b0  by using the peaks found in #1 to guess where the block should line up for these time points. It localizes the mean image for that block/sub-movie in the stack space (similar to above) and then uses that localization to put the rois in the stack space.\

\b IN: 		subject name\
		movie date\
		location\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 		optional arguments
\b 		\
OUT:		rois 	-  struct array of size nClusters, nBlocks with fields w (roi weights), x, y, z (position in stack). rotation is 				applied to w, and w is padded with nan\
		xyzrcoClusterPeaks - array of size 6 x nClusters x nBlocks containing localization of each mean image from 				blocks in time clusters  \
		\
SAVED:	nothing yet!\
\
VISUALIZATION TOOLS:\
testRegRoiInVol
\b0  - a script that will plot a stack slice and clusters from different dates. not a stand alone function yet\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \

\i unmaintained:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\i0\b0 \cf0 The following functions have not been updated to work with current roi format, but might be helpful
\b :\
plotRegRoiInVol, plotRoisInVol, plotRegisteredRoisInSection
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul ______________________________________________________________________\ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 \
RUNNING THIS STUFF ON THE CLUSTER\
=================================
\b0 \
findAndReportPeaks.sh  <subject> <movieDate> will run the localization and produce many of the desired graphics including:\
block comparison gifs (montage, overlay, difference), the ball and stick gif, and the rotating rects gif. These will all be saved in \
the reference localization folder.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul ______________________________________________________________________
\b \ulnone \
\
\
\
A more detailed description of the algorithm used in blockwiseMovieStackCorr\
\
For frame 1:
\b0 \
\
search widely to narrow down search range\
	find best XYZ for R = 0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 	\cf3 optionally: use xy values from another date and use search range specific leash (xMargin, yMargin; default 50 pix)\cf0 \
	\cf4 figure showing maximum correlation vs z in frame001/zFit.pdf \cf0 \
	find XY outliers using robust planar fit, use inliers to fit XYZ\
		outliers are defined as points with residuals greater than 8*robustSTD or greater than some set number of pixels away 		from prior\
	find best R in (-10:.5:10) for Z = best fit Z, XY = best fit XY \'b1 10 pix\
	\cf4 figure showing maximum correlation vs angle in frame001/rFit.pdf \cf0 \
	fit XY with robust planar fit\
	use inliers from XY fit to fit R with a plane, fit Z with local piecewise function (loess)\
	\cf4 figure showing fits and outliers in searchRangeFig.pdf\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	\cf4 save matrix of fits for future use in xyzrSearchRange.mat\
	\cf0 \
use XYZR fit values to define center point of search range\
	R -2 : 0.25 : 2 around fit\
	Z -6 : 6 around fit\
	XY search within 20 pixels\
		XY location must have 80% overlap with reference\
within search range, compute all correlation values, find best\
	keep at most 400 
\i positive
\i0  correlation values \
	\cf4 save kept values in frame001/bockXXX.mat\
	difference image showing block - reference match in blockDiffs.gif \
	side by side comparison of the block and reference match in blockMontage.gif\
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 for frame N+1:
\b0 \
\
fit XYZR values from frame N\
	same fitting as above\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 	outliers are noted\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 use XYZR fit values to define center point of search range for frame N+1 as above\
compute all correlation values within search range and find best as above \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 computes in ~8 minutes (about 9.5 hrs for 70 frames)\
\cf6 \
if no good peak is found, use center of the search range and save the corr value as nan\
update search range for next frame\cf5 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 to run everything at once on the cluster - use findAndReportPeaks.sh or findAndReportPeaksWrapper.sh\
\
after computing:\
	
\b0 run xyzrcBallStickFig to get 3d scatter of block registration for a given frame, or run warpGif to get a movie\
	run createPairPlots to see 6 plots of correlation peaks \
	run fitXYZRSearchRange with a frame\'92s xyzr peak as input to get the search range for the following frame\
\
}